<?php

// Create file as mhash.php

define("ENABLE_MHASH",	false);
define("SECRET",	'this is our secret key!');

function hmacMD5($data, $key) {
	// Using our definition: 
	// HMAC(Data) = Hash(SecretKey, Hash(SecretKey, Data))
	$block_size = 64; // byte length for md5
	if ( strlen($key) > $block_size ) 
		$key = pack("H*", md5($key));
	// Full the rest of the key with NULL if shorter than block_size
	$key  = str_pad($key, $block_size, chr(0x00));
	// Create some padded vars to Xor with our key
	$ipad = str_pad('', $block_size, chr(0x36));
	$opad = str_pad('', $block_size, chr(0x5C));
	$k_ipad = $ipad ^ $key;
	$k_opad = $opad ^ $key;
	return md5($k_opad  . pack("H*", md5($k_ipad . $data)));
}

// Return a HMAC using the md5 hash function 
function mhash_cgi($data, $key) {
	// If we enabled mhash usage use it
	if ( ENABLE_MHASH ) {
		// Convert the binary hash to something legable
		return bin2hex(mhash(MHASH_MD5, $data, $key));
	} else {
		return hmacMD5($data, $key);
	}
}

// Check if the hash has changed
function mhash_check($data, $hash) {
	$check_hash = mhash_cgi($data, SECRET);
	// Check if our original data hash matches our current data hash
	if ( $hash != $check_hash ) {
		echo "Mmm, some CGI variables have been tampered with, abort!";
		exit();
	}
	return true;
}

global $check_hash;
$check_hash = array(
	'website'       => 'user_id:section',
	'invoices'      => 'user_id:action:amount:date'
);

// A new improved hash function to use
function mhash_improved_check($lookup, $method) {
	global $check_hash;
	$method == 'GET' ? $_VAR = $_GET : $_VAR = $_POST;
	$a_cgi = explode(":", $check_hash[$lookup]);
	foreach ( $a_cgi as $var )
		$data .= $var.'='.$_VAR[$var];
	mhash_check($data, $_VAR['hash']);
}

?>
