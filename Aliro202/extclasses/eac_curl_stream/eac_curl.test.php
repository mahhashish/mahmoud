<?php/** * eac_curl.test.php * test/example for eac_curl.class and eac_streams.class * * PHP version 5 * * @author	   Kevin Burkholder <KBurkholder@EarthAsylum.com> *//* +------------------------------------------------------------------------+   | Copyright 2008, Kevin Burkholder               www.KevinBurkholder.com |   | Some rights reserved.                                                  |   |                                                                        |   | This work is licensed under the Creative Commons GNU Lesser General    |   | Public License. To view a copy of this license, visit                  |   |     http://creativecommons.org/licenses/LGPL/2.1/                      |   |                                                                        |   | Please see the License_LGPL_x.x.txt file for redistribution and use    |   | restrictions. If this file was not included with the distribution of   |   | this software, it may be found here:                                   |   |     http://www.kevinburkholder.com/sw_license.php                      |   |                                                                        |   | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    |   | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      |   | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  |   | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   |   | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  |   | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       |   | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  |   | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  |   | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    |   | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  |   | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   |   |                                                                        |   +------------------------------------------------------------------------+   |                                                                        |   | Author:     Kevin Burkholder                                           |   |             EarthAsylum Consulting                                     |   |             KBurkholder@EarthAsylum.com                                |   |                                                                        |   +------------------------------------------------------------------------+ *//*	----------------------------------------------------------------------------------------------------	This test program uses eac_curl.class.php and/or eac_streams.class.php to send and receive http	requests to PostTest.php. In order to run this test on your server, you will need to download	PostTest.php at: 					http://www.kevinburkholder.com/sw_tools.php							Also, this line (below)					$http->sendLastResult("Kevin Burkholder <kburkholder@earthasylum.com>");	should be changed to reflect you/your email (unless you really do want to send your results to me).	---------------------------------------------------------------------------------------------------- *//*	----------------------------------------------------------------------------------------------------	New in curl.class v0.7.4 and streams.class v0.3.4:		copyCookies()		- copies the cookies sent from the browser to the curl/stream request.		head()				- sends an http HEAD request.	delete()			- sends an http DELETE request (must have a receiver program - see http_put_file.php)	options()			- sends an http OPTIONS request (must be supported by the server)	trace()				- sends an http TRACE request (must be supported by the server)	Known bugs:	eac_streams.class.php relies on PHP returning header information in the $http_response_header variable.	Apparently, if the body of the response is empty (Content-Length: 0), this variable is not populated by PHP.	---------------------------------------------------------------------------------------------------- *//** a simple GET request using curl: * include('eac_curl.class.php'); * $http = new cURL(); * $result = $http->get('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php'); *//** a simple GET request using streams: * include('eac_streams.class.php'); * $http = new stream(); * $result = $http->get('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php'); */// load initialization code (specific to my app)	@include($_SERVER['DOCUMENT_ROOT'].'/parameters.inc');ini_set('display_errors',1);// set some fields$fields = array();$fields['FirstName'] 	= "Kevin";$fields['LastName'] 	= "Burkholder";$fields['FullName'] 	= "Kevin J. Burkholder";$fields['Email']		= "kburkholder@earthasylum.com";// set some options using curl_setopt names// see http://us2.php.net/manual/en/function.curl-setopt.php// options are any CURL options and can be named 'CURL_{option} or STREAM_{option}.// streams.class will ignore unrecognized curl options.$options = array();$options['CURLOPT_AUTOREFERER'] = 1;$options['CURLOPT_CRLF'] 		= 1;$options['CURLOPT_NOPROGRESS'] 	= 1;if (isset($_GET['streams'])) {	// use streams... (/eac_curl.test.php?streams)	include('eac_streams.class.php');	// instantiate and load options	$http = new stream($options);} else {	// use curl...	include('eac_curl.class.php');	// instantiate and load options	$http = new cURL($options);}// $http->Type == "CURL" or "STREAM"// another way to load options// setOptions() resets options to default before loading $options.$http->setOptions($options);// Note: setOptions() clears all request headers// call copyHeaders() or header() or copyCookies() after setOptions()// add a new (single) option$http->setOption('CURLOPT_VERBOSE', 1);// copy the http request headers to the curl request// any $_SERVER['HTTP_xxx'] headers are sent with the curl request$http->copyHeaders();// add a header$http->header("X-EAC-".$http->Type."-Test: ".$http->Type." test header");// copy $_COOKIE to the curl request// new in curl.class v0.7.3 and streams.class v0.3.3$http->copyCookies();// set username & password (this example is the default for PUT/DELETE)$http->setOption('CURLOPT_USERPWD',"anonymous:".$_SERVER['SERVER_ADMIN']);// *** PUT ***// PUT text to a file (there must be a receiver for the put request - see http_put_file.php)$http->put('http://'.$_SERVER['HTTP_HOST'].'/upload/my_file.txt',"this is the text in the file\n");echo "PUT text<br><pre>";print_r($http->getHeaders());echo "</pre>";// PUT a file (this example essentially copies the above file)$http->put('http://'.$_SERVER['HTTP_HOST'].'/upload/your_file.txt',"@/upload/my_file.txt");echo "PUT file<br><pre>";print_r($http->getHeaders());echo "</pre>";// *** DELETE *** (new in curl.class v0.7.4 and streams.class v0.3.4)// DELETE a file (there must be a receiver for the delete request - see http_put_file.php)$http->delete('http://'.$_SERVER['HTTP_HOST'].'/upload/my_file.txt');echo "DELETE file<br><pre>";print_r($http->getHeaders());echo "</pre>";// *** HEAD *** (new in curl.class v0.7.4 and streams.class v0.3.4)// HEAD request to PostTest.php with fields$vars = http_build_query($fields);$http->head('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php?'.$vars);echo "HEAD<br><pre>";print_r($http->getHeaders());echo "</pre>";// *** OPTIONS *** (new in curl.class v0.7.4 and streams.class v0.3.4) - responses vary by server// OPTIONS PostTest.php with fields$vars = http_build_query($fields);$http->options('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php?'.$vars);echo "OPTIONS url<br><pre>";print_r($http->getHeaders());echo "</pre>";// OPTIONS *$http->options('http://'.$_SERVER['HTTP_HOST'].'/*');echo "OPTIONS *<br><pre>";print_r($http->getHeaders());echo "</pre>";// *** TRACE *** (new in curl.class v0.7.4 and streams.class v0.3.4)// TRACE PostTest.php with fields$vars = http_build_query($fields);$http->trace('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php?'.$vars);echo "TRACE<br><pre>";print_r($http->getHeaders());echo "</pre>";// *** GET ***// GET PostTest.php with fields --$vars = http_build_query($fields);// when using streams, STREAMS_ASYNCRONOUS sends the request and returns "OK" (does not wait for a response).// when using CURL, CURLOPT_ASYNCRONOUS sets the timeout to 1 second and, when a timeout occurs, returns "OK".//$http->setOption('STREAMS_ASYNCRONOUS',1);$result = $http->get('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php?'.$vars);echo "GET<br><pre>";print_r($http->getHeaders());echo "</pre>";// another way to get the results$result = $http->getLastResult();// email the result (to [required], from, subject, xheader array, line-feed char [\n || \r\n])if ($http->success)	$http->sendLastResult("Kevin Burkholder <kburkholder@earthasylum.com>");else	trigger_error($http->error,E_USER_WARNING);// *** POST ***// POST to PostTest.php with fieldsecho "POST<br>".$http->post('http://'.$_SERVER['HTTP_HOST'].'/PostTest.php',$fields);// display the response headers, the cURL stats, and our optionsecho "<pre>";echo "response headers ";print_r($http->getHeaders());echo "info ";print_r($http->getInfo());echo "options used ";print_r($http->getOptions());echo "</pre>";// $http->success = false on error, else true// $http->error = error message (on error)?>